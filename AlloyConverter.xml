<?xml version="1.0" encoding="UTF-8"?><process version="9.6.000">
  <context>
    <input/>
    <output/>
    <macros/>
  </context>
  <operator activated="true" class="process" compatibility="9.4.000" expanded="true" name="Process">
    <parameter key="logverbosity" value="init"/>
    <parameter key="logfile" value="/Users/mattiafumagalli/Desktop/prova.log"/>
    <parameter key="resultfile" value="/Users/mattiafumagalli/prova.res"/>
    <parameter key="random_seed" value="2001"/>
    <parameter key="send_mail" value="never"/>
    <parameter key="notification_email" value=""/>
    <parameter key="process_duration_for_mail" value="30"/>
    <parameter key="encoding" value="SYSTEM"/>
    <process expanded="true">
      <operator activated="true" class="set_macros" compatibility="9.6.000" expanded="true" height="68" name="Set Macros" width="90" x="447" y="442">
        <list key="macros">
          <parameter key="inputFile" value="/home/marco/Desktop/Alloy/people.owl"/>
          <parameter key="outputDirectory" value="/home/marco/Desktop/Alloy/Results/"/>
          <parameter key="AlloyDefinitions" value="/home/marco/Desktop/Alloy/AlloyDefinitions.als"/>
        </list>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.2.000" expanded="true" height="82" name="Alloy Generator" width="90" x="916" y="442">
        <parameter key="script" value="#!/usr/bin/env python&#10;# -*- coding: utf-8 -*-&#10;&#10;# Based on:&#10;# https://www.researchgate.net/publication/272763162_A_Non-Standard_Approach_for_the_OWL_Ontologies_Checking_and_Reasoning&#10;&#10;import os&#10;import ontospy&#10;from rdflib import RDFS, OWL&#10;&#10;&#10;def nameOf(text):&#10;    return (str(text).split(&quot;/&quot;))[-1].split(&quot;#&quot;)[-1]&#10;&#10;def domains(property_):&#10;    property_domains = &quot;&quot;&#10;    if(property_.domains):&#10;        for domain_ in property_.domains:&#10;            property_domains = property_domains + str(domain_.uri) + &quot; &quot;&#10;    elif(property_.parents()):&#10;        for property_parent in property_.parents():&#10;            property_domains = property_domains + &quot; &quot; + &quot; &quot;.join(domains(property_parent))&#10;    return property_domains.split()&#10;&#10;&#10;def ranges(property_):&#10;    property_ranges = &quot;&quot;&#10;    if(property_.ranges):&#10;        for range_ in property_.ranges:&#10;            property_ranges = property_ranges + str(range_.uri) + &quot; &quot;&#10;    elif(property_.parents()):&#10;        for property_parent in property_.parents():&#10;            property_ranges = property_ranges + &quot; &quot; + &quot; &quot;.join(ranges(property_parent))&#10;    return property_ranges.split()&#10;    &#10;def rm_main():&#10;&#9;# Define Ontology Analyser&#9;&#10;&#9;o = ontospy.Ontospy()&#10;&#9;AlloyDefinitions = &quot;&quot;&#10;&#9;inputFile = &quot;%{inputFile}&quot; #, people.owl, Animal.owl, schema_2020-03-10.n3&#10;&#9;o.load_rdf(inputFile)&#10;&#10;&#9;# Create the directory in which store the new vocabulary&#10;&#9;outputDirectory = &quot;%{outputDirectory}&quot;&#10;&#9;if not os.path.isdir(outputDirectory):&#10;&#9;&#9;os.makedirs(outputDirectory)&#10;     &#10;&#9;moduleName = ((str(inputFile).split(&quot;/&quot;)[-1]).split(&quot;.&quot;))[-2] + &quot;Generator&quot;&#10;&#9;fileName = outputDirectory + moduleName + &quot;.als&quot;&#10;&#9;&#10;&#9;o.build_all()&#10;&#10;&#9;print(o.stats())&#10;&#10;&#9;#print(o.all_classes)&#10;&#9;#print(o.all_properties)&#10;&#9;#print(o.all_shapes)&#10;&#9;#print(o.all_ontologies)&#10;&#9;#print(o.all_skos_concepts)&#10;&#9;#print(o.rdflib_graph)&#10;&#10;&#9;AlloyModel = &quot;&quot;&#10;&#10;&#9;for class_ in o.all_classes:&#10;&#9;&#9;#print(&quot;Class: &quot; + str(class_.uri))&#10;&#9;&#9;className = nameOf(class_.uri)&#10;&#10;&#9;&#9;AlloyClass = &quot;sig &quot; + className&#10;&#10;&#9;&#9;for subClassOf in class_.parents():&#10;&#9;&#9;&#9;subClassOfName = nameOf(subClassOf.uri)&#10;&#9;&#9;&#9;AlloyClass = AlloyClass + &quot; extends &quot; + subClassOfName&#10;&#10;&#9;&#9;AlloyClass = AlloyClass + &quot; { \n\t&quot;&#10;&#10;&#9;&#9;for property_ in o.all_properties:&#10;&#9;&#9;&#9;#print(&quot;Property: &quot; + str(property_.uri))&#10;&#9;&#9;&#9;domains_ = domains(property_)&#10;&#9;&#9;&#9;property_Name = nameOf(property_.uri)&#10;&#9;&#9;&#9;for domain_ in domains_:&#10;&#9;&#9;&#9;&#9;if(domain_ == str(class_.uri)):&#10;&#9;&#9;&#9;&#9;&#9;#print(&quot;Domain: &quot; + str(domain_))&#10;&#9;&#9;&#9;&#9;&#9;ranges_ = ranges(property_)&#10;&#9;&#9;&#9;&#9;&#9;for range_ in ranges_:&#10;&#9;&#9;&#9;&#9;&#9;&#9;#print(&quot;Range: &quot; + str(range_))&#10;&#9;&#9;&#9;&#9;&#9;&#9;AlloyClass = AlloyClass + property_Name + &quot;: &quot; + nameOf(range_) + &quot;,\n\t&quot;&#10;&#10;&#9;&#9;AlloyClass = AlloyClass[0:-3] + &quot;} \n&quot;&#10;&#9;&#9;&#10;&#9;&#9;AlloyModel = AlloyModel + AlloyClass&#10;&#9;&#9;#print()&#10;&#10;&#9;with open(fileName, &quot;w+&quot;) as Alloy:&#10;&#9;&#9;Alloy.write(&quot;module &quot;+ moduleName + &quot;\n\n&quot;)&#10;&#9;&#9;Alloy.write(AlloyModel)&#10;&#10;&#9;AlloyModel = &quot;&quot;&#10;&#9;notAlloyModel = &quot;&quot;&#10;&#9;notAlloyPred = set()&#10;&#10;&#9;for subject, predicate, object_ in o.rdflib_graph:&#10;&#9;&#9;predicateName = nameOf(predicate.encode('utf-8').strip())&#10;&#9;&#9;if(predicateName != &quot;type&quot;):&#10;&#9;&#9;&#9;#print(subject, predicate, object_)&#10;&#9;&#9;&#9;#print()&#10;&#9;&#9;&#10;&#9;&#9;&#9;subj = o.get_any_entity(uri=subject.encode('utf-8').strip())&#10;&#9;&#9;&#9;pred = o.get_any_entity(uri=predicate.encode('utf-8').strip())&#10;&#9;&#9;&#9;obj = o.get_any_entity(uri=object_.encode('utf-8').strip())&#10;&#10;&#9;&#9;&#9;if(subj and obj):&#10;&#9;&#9;&#9;&#9;if predicateName == &quot;subPropertyOf&quot;:       &#10;&#9;&#9;&#9;&#9;&#9;subj_range = &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;if(&quot;Property&quot; == str(subj)[1:9] and subj.ranges):&#10;&#9;&#9;&#9;&#9;&#9;&#9;print(len(subj.ranges))&#10;&#9;&#9;&#9;&#9;&#9;&#9;subj_range = subj.ranges[0].uri&#10;&#9;&#9;&#9;&#9;&#9;elif(&quot;Class&quot; == str(subj)[1:6] and subj.range_of):&#10;&#9;&#9;&#9;&#9;&#9;&#9;print(len(subj.range_of))&#10;&#9;&#9;&#9;&#9;&#9;&#9;subj_range = subj.range_of[0].uri            &#10;&#10;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;// subPropertyOf as Figure4\n&quot;&#10;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;pred subPropertyOf{all a:&quot; + nameOf(subj_range) + &quot; | a.&quot; + nameOf(subj.uri) + &quot; in a.&quot; + nameOf(obj.uri) + &quot;}&quot; + &quot;\n&quot;&#10;&#10;&#9;&#9;&#9;&#9;&#9;obj_range = &quot;&quot;&#10;&#9;&#9;&#9;&#9;&#9;if(&quot;Property&quot; == str(obj)[1:9] and obj.ranges):&#10;&#9;&#9;&#9;&#9;&#9;&#9;print(len(obj.ranges))&#10;&#9;&#9;&#9;&#9;&#9;&#9;obj_range = obj.ranges[0].uri&#10;&#9;&#9;&#9;&#9;&#9;elif(&quot;Class&quot; == str(obj)[1:6] and obj.range_of):&#10;&#9;&#9;&#9;&#9;&#9;&#9;print(len(obj.range_of))&#10;&#9;&#9;&#9;&#9;&#9;&#9;obj_range = obj.range_of[0].uri&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;if(obj_range):&#10;&#9;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;// subPropertyOf as TABLE I\n&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;pred subPropertyOf{all r:&quot; + nameOf(subj_range) + &quot; | r in &quot; + nameOf(obj_range) + &quot;}&quot; + &quot;\n&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;elif predicateName == &quot;inverseOf&quot;:&#10;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;pred inverseOf{&quot; + nameOf(subj.uri) + &quot; = ~&quot; + nameOf(obj.uri) + &quot;}&quot; + &quot;\n&quot;&#10;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;elif predicateName ==  &quot;disjointWith&quot;:&#10;&#9;&#9;&#9;&#9;&#9;if(subj.parents() and obj.parents() and subj.parents()[0] != obj.parents()[0]):&#10;&#9;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;pred { no c1:&quot; + nameOf(subj.uri) + &quot;, c2:&quot; + nameOf(obj.uri) + &quot;| c1 = c2}&quot; + &quot;\n&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;elif predicateName ==  &quot;complementOf&quot;:&#10;&#9;&#9;&#9;&#9;&#9;C = &quot;{&quot;&#10;&#9;&#9;&#9;&#9;&#9;for class_ in o.all_classes:&#10;&#9;&#9;&#9;&#9;&#9;&#9;if(nameOf(obj.uri) != nameOf(class_.uri)):&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;C = C + nameOf(class_.uri)&#10;&#9;&#9;&#9;&#9;&#9;C = C + &quot;}&quot;&#10;&#10;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;pred { &quot; + nameOf(subj.uri) + &quot; = &quot; + str(C) + &quot;}&quot; + &quot;\n&quot;&#10;&#10;&#9;&#9;&#9;&#9;elif predicateName ==  &quot;equivalentClass&quot;:&#10;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;pred equivalentClass{ &quot; + nameOf(subj.uri) + &quot; = &quot; + nameOf(obj.uri) + &quot;}&quot; + &quot;\n&quot;&#10;&#10;&#9;&#9;&#9;&#9;elif predicateName ==  &quot;equivalentProperty&quot;:&#10;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;pred equivalentProperty{ &quot; + nameOf(subj.uri) + &quot; = &quot; + nameOf(obj.uri) + &quot;}&quot; + &quot;\n&quot;&#10;&#10;&#9;&#9;&#9;&#9;elif predicateName ==  &quot;TransitiveProperty&quot;:&#10;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;pred TransitiveProperty{ a,b,c ∈ &quot; + nameOf(subj.uri) + &quot; / a.(&quot; + nameOf(predicate) + &quot;) = b &amp;&amp; b.(&quot; + nameOf(predicate) + &quot;) = c ⇒ a.(&quot; + nameOf(predicate) + &quot;) = c }&quot; + &quot;\n&quot;&#10;&#10;&#9;&#9;&#9;&#9;elif predicateName ==  &quot;hasValue&quot;:&#10;&#9;&#9;&#9;&#9;&#9;if((&quot;Property&quot; == str(pred)[1:9] and pred.ranges) or (&quot;Class&quot; == str(pred)[1:6] and pred.range_of)):&#10;&#9;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;pred hasValue{ #( &quot; + pred.ranges[0] + &quot; ) = 1}&quot; + &quot;\n&quot;&#10;&#10;&#9;&#9;&#9;&#9;elif predicateName ==  &quot;cardinality&quot;:&#10;&#9;&#9;&#9;&#9;&#9;if((&quot;Property&quot; == str(pred)[1:9] and pred.ranges) or (&quot;Class&quot; == str(pred)[1:6] and pred.range_of)):&#10;&#9;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;pred cardinality{ #( &quot; + pred.ranges[0] + &quot; ) = &quot; + nameOf(obj.uri) + &quot;}&quot; + &quot;\n&quot;&#10;&#10;&#9;&#9;&#9;&#9;elif predicateName ==  &quot;maxCardinality&quot;:&#10;&#9;&#9;&#9;&#9;&#9;if((&quot;Property&quot; == str(pred)[1:9] and pred.ranges) or (&quot;Class&quot; == str(pred)[1:6] and pred.range_of)):&#10;&#9;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;pred maxCardinality{ #( &quot; + pred.ranges[0] + &quot; ) &lt;= &quot; + nameOf(obj.uri) + &quot;}&quot; + &quot;\n&quot;&#10;&#10;&#9;&#9;&#9;&#9;elif predicateName ==  &quot;minCardinality&quot;:&#10;&#9;&#9;&#9;&#9;&#9;if((&quot;Property&quot; == str(pred)[1:9] and pred.ranges) or (&quot;Class&quot; == str(pred)[1:6] and pred.range_of)):&#10;&#9;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;pred minCardinality{ #( &quot; + pred.ranges[0] + &quot; ) &gt;= &quot; + nameOf(obj.uri) + &quot;}&quot; + &quot;\n&quot;&#10;&#10;&#9;&#9;&#9;&#9;elif predicateName ==  &quot;SymmetricProperty&quot;:&#10;&#9;&#9;&#9;&#9;&#9;if(((&quot;Property&quot; == str(pred)[1:9] and pred.ranges) or (&quot;Class&quot; == str(pred)[1:6] and pred.range_of)) and ((&quot;Property&quot; == str(pred)[1:9] and pred.domains) or (&quot;Class&quot; == str(pred)[1:6] and pred.domain_of))):&#10;&#9;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;pred SymmetricProperty{ a ∈ &quot; + pred.domains[0] + &quot; &amp;&amp;  b ∈ &quot; + pred.ranges[0] + &quot; / a.(&quot; + nameOf(predicate) + &quot;)  = b ⇒ b.(&quot; + nameOf(predicate) + &quot;) }&quot; + &quot;\n&quot;&#10;&#10;&#9;&#9;&#9;&#9;elif predicateName ==  &quot;FunctionalProperty&quot;:&#10;&#9;&#9;&#9;&#9;&#9;if((&quot;Property&quot; == str(pred)[1:9] and pred.ranges) or (&quot;Class&quot; == str(pred)[1:6] and pred.range_of)):&#10;&#9;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;pred FunctionalProperty{ #(&quot; + pred.ranges[0] + &quot;) = 1}&quot; + &quot;\n&quot;&#10;&#10;&#9;&#9;&#9;&#9;elif predicateName ==  &quot;InverseFunctionalProperty&quot;:&#10;&#9;&#9;&#9;&#9;&#9;if((&quot;Property&quot; == str(pred)[1:9] and pred.domains) or (&quot;Class&quot; == str(pred)[1:6] and pred.domain_of)):&#10;&#9;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;pred InverseFunctionalProperty{ #(&quot; + pred.domains[0] + &quot;) = 1}&quot; + &quot;\n&quot;&#10;&#10;&#9;&#9;&#9;&#9;elif predicateName ==  &quot;allValuesFrom&quot;:&#10;&#9;&#9;&#9;&#9;&#9;if((&quot;Property&quot; == str(pred)[1:9] and pred.ranges) or (&quot;Class&quot; == str(pred)[1:6] and pred.range_of)):&#10;&#9;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;pred allValuesFrom{ &quot; + nameOf(pred.ranges[0]) + &quot; in &quot; + nameOf(obj.uri) + &quot;}&quot; + &quot;\n&quot;&#10;&#10;&#9;&#9;&#9;&#9;elif predicateName ==  &quot;someValuesFrom&quot;:&#10;&#9;&#9;&#9;&#9;&#9;if((&quot;Property&quot; == str(pred)[1:9] and pred.ranges) or (&quot;Class&quot; == str(pred)[1:6] and pred.range_of)):&#10;&#9;&#9;&#9;&#9;&#9;&#9;AlloyModel = AlloyModel + &quot;pred allValuesFrom{ some r: &quot; + nameOf(pred.ranges[0]) + &quot; | r in &quot; + nameOf(obj.uri) + &quot;}&quot; + &quot;\n&quot;&#10;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;else:&#10;&#9;&#9;&#9;&#9;&#9;notAlloyModel = notAlloyModel + str(subject.encode('utf-8').strip()) + &quot;,\t&quot; + str(predicate.encode('utf-8').strip()) + &quot;,\t&quot; + str(object_.encode('utf-8').strip()) + &quot;\n&quot;&#10;&#9;&#9;&#9;&#9;&#9;notAlloyPred.add(str(predicate))&#10;&#9;&#9;&#9;&#10;&#9;&#9;&#9;else:&#10;&#9;&#9;&#9;&#9;notAlloyModel = notAlloyModel + str(subject.encode('utf-8').strip()) + &quot;,\t&quot; + str(predicate.encode('utf-8').strip()) + &quot;,\t&quot; + str(object_.encode('utf-8').strip()) + &quot;\n&quot;&#10;&#9;&#9;&#9;&#9;#notAlloyPred.add(str(predicate))&#10;&#9;&#9;&#9;&#10;&#10;&#9;with open(fileName, &quot;a+&quot;) as Alloy:&#10;&#9;&#9;Alloy.write(&quot;\n&quot;)&#10;&#9;&#9;Alloy.write(AlloyModel)&#10;&#10;&#9;with open(fileName+&quot;_notAlloy.csv&quot;, &quot;w+&quot;) as notAlloy:&#10;&#9;&#9;notAlloy.write(&quot;List of all the triples not used for Alloy conversion\n&quot;)&#10;&#9;&#9;notAlloy.write(notAlloyModel)&#10;&#10;&#9;with open(fileName+&quot;_notAlloyPredicates.csv&quot;, &quot;w+&quot;) as notAlloyPredicates:&#10;&#9;&#9;notAlloyPredicates.write(&quot;List of predicates in valid triples(i.e. those without BlankNodes) not used for Alloy conversion\n&quot;)&#10;&#9;&#9;for pred in notAlloyPred:&#10;&#9;&#9;&#9;notAlloyPredicates.write(pred + &quot;\n&quot;)"/>
        <parameter key="use_default_python" value="false"/>
        <parameter key="package_manager" value="specific python binaries"/>
        <parameter key="python_binary" value="/usr/bin/python"/>
      </operator>
      <operator activated="true" class="python_scripting:execute_python" compatibility="9.2.000" expanded="true" height="82" name="AlloyCreator" width="90" x="916" y="646">
        <parameter key="script" value="#!/usr/bin/env python&#10;# -*- coding: utf-8 -*-&#10;&#10;# Based on:&#10;# https://www.researchgate.net/publication/220535396_Reasoning_support_for_Semantic_Web_ontology_family_languages_using_Alloy&#10;&#10;import ontospy&#10;import os&#10;from rdflib import RDFS, OWL&#10;&#10;def nameOf(text):&#10;    return (str(text).split(&quot;/&quot;))[-1].split(&quot;#&quot;)[-1]&#10;&#10;def rm_main():&#10;&#9;# Define Ontology Analyser&#9;&#10;&#9;o = ontospy.Ontospy()&#10;&#9;AlloyDefinitions = &quot;&quot;&#10;&#9;inputFile = &quot;%{inputFile}&quot; #, people.owl, Animal.owl, schema_2020-03-10.n3&#10;&#9;o.load_rdf(inputFile)&#10;&#10;&#9;# Create the directory in which store the new vocabulary&#10;&#9;outputDirectory = &quot;%{outputDirectory}&quot;&#10;&#9;if not os.path.isdir(outputDirectory):&#10;&#9;&#9;os.makedirs(outputDirectory)&#10;     &#10;&#9;moduleName = ((str(inputFile).split(&quot;/&quot;)[-1]).split(&quot;.&quot;))[-2]  + &quot;Creator&quot;&#10;&#9;fileName = outputDirectory + moduleName + &quot;.als&quot;&#10;&#9;&#10;&#9;o.build_all()&#10;&#9;&#10;&#9;print(o.stats())&#10;&#9;&#10;&#9;AlloyModel = &quot;// Classes Definitions \n&quot;&#10;&#9;&#10;&#9;for class_ in o.all_classes:&#10;&#9;    #print(&quot;Class: &quot; + str(class_.uri))&#10;&#9;    className = nameOf(class_.uri)&#10;&#9;    AlloyModel = AlloyModel + &quot;sig &quot; + className + &quot; in Class{}\n&quot; #static&#10;&#9;&#10;&#9;AlloyModel = AlloyModel + &quot;\n// Properties Definitions \n&quot;&#10;&#9;&#10;&#9;for property_ in o.all_properties:&#10;&#9;    #print(&quot;Property: &quot; + str(property_.uri))&#10;&#9;    property_Name = nameOf(property_.uri)&#10;&#9;    AlloyModel = AlloyModel + &quot;sig &quot; + property_Name + &quot; in Property{}\n&quot; #static&#10;&#10;&#9;AlloyDefinitions = &quot;&quot;&#10;&#9;with open(&quot;%{AlloyDefinitions}&quot;, &quot;r&quot;) as AlloyDefinitionsFile:&#10;&#9;&#9;AlloyDefinitions = AlloyDefinitionsFile.read()&#10;&#9;&#9;&#10;&#9;with open(fileName, &quot;w+&quot;) as Alloy:&#10;&#9;    Alloy.write(&quot;module &quot;+ moduleName + &quot;\n\n&quot;)&#10;&#9;    &#10;&#9;    Alloy.write(AlloyDefinitions + &quot;\n\n&quot;)&#10;&#9;    &#10;&#9;    Alloy.write(AlloyModel)"/>
        <parameter key="use_default_python" value="false"/>
        <parameter key="package_manager" value="specific python binaries"/>
        <parameter key="python_binary" value="/usr/bin/python"/>
      </operator>
      <portSpacing port="source_input 1" spacing="0"/>
      <portSpacing port="sink_result 1" spacing="0"/>
      <description align="center" color="yellow" colored="false" height="188" resized="true" width="543" x="857" y="381">Generate the Alloy Model as from:&lt;br&gt;https://pdfs.semanticscholar.org/e3b6/f7d0530892d00e785cb983b6a9b32c385e78.pdf</description>
      <description align="center" color="yellow" colored="false" height="103" resized="true" width="231" x="765" y="249">Requirements:&lt;br&gt;&lt;br&gt;ontospy:&lt;br/&gt;pip install ontospy</description>
      <description align="center" color="yellow" colored="false" height="177" resized="true" width="790" x="849" y="596">Create the Alloy Model as from:&lt;br&gt;https://www.researchgate.net/publication/220535396_Reasoning_support_for_Semantic_Web_ontology_family_languages_using_Alloy</description>
      <description align="center" color="blue" colored="true" height="475" resized="true" width="505" x="229" y="316">Set the macros used by the scripts:&lt;br&gt;- inputFile: RDF/OWL/N3/TTL file of the schema to convert&lt;br&gt;- outputDirectory: Directory where to store the results&lt;br/&gt;- AlloyDefinitions: .als file with Base OWL/RDFS Definitions used by AlloyCreator</description>
    </process>
  </operator>
</process>
